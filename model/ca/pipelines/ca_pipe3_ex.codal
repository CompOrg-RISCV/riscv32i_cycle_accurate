/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EXMEM)
{
    use alu_operate;
    use ex_output;

    semantics
    {

        // Develop a multiplexer for the ALU src1 operand using a switch stagement using the src1_sl
        // control signal provided by the IDEX pipeline register generated by the Instructionr decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        // The input to the source 1 ALU input is from the IDEX pipeline register




        // Develop a multiplexer for the ALU src1 operand using a switch stagement using the src1_s2
        // control signal provided by the IDEX pipeline register generated by the Instructionr decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_s2 to build the complete name of input value for this switch statement?
        // The input to the source 2 ALU input is from the IDEX pipeline register



        // HALT instruction detection used for simulation purposes until the load/store instructions
        // have been implemented
        if (r_idex_halt == true)
        {
            codasip_info(INFO_GENERAL, "Halt instruction indicated");
//            codasip_store_exit_code(rf_xpr[GPR_RETVAL] & 0xFF);
            #pragma simulator
            {
                codasip_halt();
            }

        }

        // If not a halt operation, call ALU routine
        alu_operate();






        // Update the pipeline registers between the Execute (EX) and MEMORY (MEM) stages
        ex_output();
    };
};

event alu_operate : pipeline(pipe.EXMEM)
{
    semantics
    {
        // A switch statement will be used to determine and evaluate the ALU operation using
        // the aluop code provided by the IDEX pipeline register whose value is determined
        // by the instruction decoder.
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to aluop to build the complete name of input value for this switch statement?





    };
};


event ex_output : pipeline(pipe.EXMEM)
{
    semantics
    {
        // Store the ALU result to the EXMEM pipeline register


        // Passing control signals to the next stage, MEM, through the EXMEM pipeline register.  These
        // signals are being passed from the IDEX pipeline to the EXMEM pipeline.
        //
        // Assign the proper IDEX pipeline register to the following EXMEM pipeline registers
        r_exmem_rd             =
        r_exmem_regwrite       =

        // Passing Decoder control-signals to the EX stage
        r_exmem_branch_inst = r_idex_branch_inst;
        r_exmem_jump_inst = r_idex_jump_inst;
        r_exmem_mem_ops = r_idex_mem_ops;
        r_exmem_memread = r_idex_memread;
    };
};

